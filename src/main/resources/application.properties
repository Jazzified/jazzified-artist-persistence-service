
spring.application.name=artist-persistence-service
spring.profiles.active=dev
spring.config.import=configserver:http://localhost:8888

logging.level.dev.tobiadegbuji.artistpersistenceservice=debug


spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect


spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password

spring.h2.console.enabled=true


#Indicates whether to expose the configuration over the actuator health point
resilience4j.circuitbreaker.instances.retrieveSpotifyArtistCB.register-health-indicator=true
#Setting buffer size at closed state
resilience4j.circuitbreaker.instances.retrieveSpotifyArtistCB.ring-buffer-size-in-closed-state= 5
#Setting buffer size in half-open state
resilience4j.circuitbreaker.instances.retrieveSpotifyArtistCB.ring-buffer-size-in-half-open-state=3
#—Sets the time the circuit breaker should wait before changing the status from open to half-open. The default value is 60,000 ms.
resilience4j.circuitbreaker.instances.retrieveSpotifyArtistCB.wait-duration-in-open-state=10s
#Sets failure rate threshold percentage. When the failure rate is greater than or equal to this threshold, the circuit breaker changes to the open state and starts short-circuiting calls
resilience4j.circuitbreaker.instances.retrieveSpotifyArtistCB.failure-rate-threshold=50
#Sers exceptions that should be recorded as failures. By default all exceptions are recorded as failures
resilience4j.circuitbreaker.instances.retrieveSpotifyArtistCB[0].record-exceptions= org.springframework.web.client.HttpServerErrorException
resilience4j.circuitbreaker.instances.retrieveSpotifyArtistCB[1].record-exceptions= java.io.IOException
resilience4j.circuitbreaker.instances.retrieveSpotifyArtistCB[2].record-exceptions= java.util.concurrent.TimeoutException
resilience4j.circuitbreaker.instances.retrieveSpotifyArtistCB[3].record-exceptions= org.springframework.web.client.ResourceAccessException

#The maximum amount of time to block a thread
resilience4j.bulkhead.instances.retrieveSpotifyArtistBH.max-wait-duration=10ms
#Sets the max # of concurrent calls
resilience4j.bulkhead.instances.retrieveSpotifyArtistBH.max-concurrent-calls=20
#Sets the max thread pool size
resilience4j.thread-pool-bulkhead.instances.retrieveSpotifyArtistBH.max-thread-pool-size=1
#Sets core thread pool size
resilience4j.thread-pool-bulkhead.instances.retrieveSpotifyArtistBH.core-thread-pool-size=1
#Sets the capacity of the queue
resilience4j.thread-pool-bulkhead.instances.retrieveSpotifyArtistBH.queue-capacity=1
#The max time that idle threads wait for new tasks before terminating. Only occurs when the number of threads is higher than the number of core threads.
resilience4j.thread-pool-bulkhead.instances.retrieveSpotifyArtistBH.keep-alive-duration=20ms

#Great Explanation of above:
#Take this example. Starting thread pool size is 1, core pool size is 5, max pool size is 10 and the queue is 100.
# As requests come in, threads will be created up to 5 and then tasks will be added to the queue until it reaches 100.
# When the queue is full new threads will be created up to maxPoolSize.
# Once all the threads are in use and the queue is full tasks will be rejected.
# As the queue reduces, so does the number of active threads.

#GOOD FORMULA FOR PROPER SIZING OF A THREAD-POOL:
# (requests per second at peak when the service is healthy * 99th percentile latency in seconds) + small amount of extra threads for overhead

#Sets max # of retry attempts
resilience4j.retry.instances.retrieveSpotifyArtistRT.max-attempts=5
#Sets wait duration "between" retry attempts
resilience4j.retry.instances.retrieveSpotifyArtistRT.wait-duration=10000
#List of exception you want to retry
resilience4j.retry.instances.retrieveSpotifyArtistRT[0].retry-exceptions=resilience4j.retry.instances.retrieveSpotifyArtistRT

